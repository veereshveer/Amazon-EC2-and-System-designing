AWSTemplateFormatVersion: '2010-09-09'
Description: Easy Model Deployer ECS Cluster - Ensure all associated models are deleted before removing this stack. Please go to https://github.com/aws-samples/easy-model-deployer for more information.
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID to be used for the ECS cluster
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The public subnets to be used for the ECS cluster
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: 'EMD-alb-sg'
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            ContentType: 'text/plain'
            MessageBody: 'Not Found'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonECS_FullAccess
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaECSManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:PutClusterCapacityProviders
                  - ecs:DescribeClusters
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - elasticloadbalancing:DescribeRules
                Resource: '*'

  LambdaDeploymentHelper:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import os

          def update_capacity_provider(event, context):
              ecs_client = boto3.client('ecs')
              cluster_name = os.environ['ECS_CLUSTER_NAME']
              capacity_provider_name = event['ResourceProperties']['CapacityProvider']
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      cluster_info = ecs_client.describe_clusters(clusters=[cluster_name])['clusters'][0]
                      current_capacity_providers = cluster_info.get('capacityProviders', [])

                      if capacity_provider_name not in current_capacity_providers:
                          current_capacity_providers.append(capacity_provider_name)

                      ecs_client.put_cluster_capacity_providers(
                          cluster=cluster_name,
                          capacityProviders=current_capacity_providers,
                          defaultCapacityProviderStrategy=[
                              {
                                  'capacityProvider': capacity_provider_name,
                                  'weight': 1,
                                  'base': 0
                              }
                          ]
                      )
                  elif event['RequestType'] == 'Delete':
                    # Retrieve current capacity providers
                    cluster_info = ecs_client.describe_clusters(clusters=[cluster_name])['clusters'][0]
                    current_capacity_providers = cluster_info.get('capacityProviders', [])

                    # Remove only the specific capacity provider
                    updated_capacity_providers = [
                        cp for cp in current_capacity_providers if cp != capacity_provider_name
                    ]

                    ecs_client.put_cluster_capacity_providers(
                        cluster=cluster_name,
                        capacityProviders=updated_capacity_providers,
                        defaultCapacityProviderStrategy=[]
                    )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

          def get_priority_number(event, context):
              elbv2_client = boto3.client('elbv2')
              listener_arn = os.environ['LISTENER_ARN']
              response_data = {}
              response_status = "SUCCESS"

              try:
                  in_use = sorted(int(r['Priority']) for r in elbv2_client.describe_rules(ListenerArn=listener_arn)['Rules'] if r['Priority'].isdecimal())
                  priority = next((str(i) for i in range(100, 200) if i not in in_use), None)

                  if priority is None:
                      raise Exception("No available priority numbers in the specified range.")

                  response_data = {'Priority': priority}
              except Exception as e:
                  response_status = "FAILED"
                  response_data = {'Error': str(e)}

              # Send response back to CloudFormation
              cfnresponse.send(event, context, response_status, response_data)

          def handler(event, context):
              print(event)
              print(context)
              logical_resource_id = event['LogicalResourceId']
              function_name = ''
              for char in logical_resource_id:
                  if char.isupper():
                      function_name += '_' + char.lower()
                  else:
                      function_name += char
              function_name = function_name.lstrip('_')
              globals()[function_name](event, context)

      Runtime: python3.10
      Timeout: 300
      Environment:
        Variables:
          ECS_CLUSTER_NAME: !Ref ECSCluster
          LISTENER_ARN: !Ref PublicLoadBalancerListener
  LogGroup:
    Type: 'AWS::Logs::LogGroup'

Outputs:
  ECSCluster:
    Description: The ECS cluster into which to launch resources
    Value: !Ref ECSCluster
  LogGroup:
    Description: The log group
    Value: !Ref LogGroup
  DNSName:
    Description: The DNS name of the public load balancer. To use HTTPS, create an SSL certificate in AWS Certificate Manager and attach it to the load balancer.
    Value: !GetAtt PublicLoadBalancer.DNSName
  PublicLoadBalancerListenerArn:
    Description: The ARN of the public load balancer listener
    Value: !GetAtt PublicLoadBalancerListener.ListenerArn
  PublicLoadBalancerSecurityGroup:
    Description: The security group for the public load balancer
    Value: !Ref PublicLoadBalancerSecurityGroup
  LambdaDeploymentHelperArn:
    Description: The Lambda function for capacity provider association
    Value: !GetAtt LambdaDeploymentHelper.Arn
